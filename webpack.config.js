const path = require("path");
const CircularDependencyPlugin = require("circular-dependency-plugin");
const UglifyJsPlugin = require("uglifyjs-webpack-plugin");
const trustHttpServer = require("./server/trust-login");
const corporateHttpServer = require("./server/corporate");
const businessHttpServer = require("./server/business");
const { router: activeManagerHttpServer } = require("./server/active-manager");
const externalMenuHttpServer = require("./server/external-menu");
const notificationsHttpServer = require("./server/notifications");
const externalHttpServer = require("./server/external");
const dbsource = require("./server/db-source");

module.exports = (env, options) => {
  return {
    entry: {
      basispanel: {
        import: "./src/ComponentLoader.ts",
        filename: "basiscore.basispanel.component.js",
        library: {
          name: "basispanel",
          type: "assign",
        },
      },
      "basispanel.min": {
        import: "./src/ComponentLoader.ts",
        filename: "basiscore.basispanel.component.min.js",
        library: {
          name: "basispanel",
          type: "assign",
        },
      },
    },
    externals: {
      "bclib/dist/bclib": {
        root: "_",
      },
    },
    devServer: {
      static: [
        {
          directory: path.resolve(__dirname, "wwwroot"),
        },
        {
          directory: path.resolve(__dirname, "node_modules/alasql/dist"),
        },
        {
          directory: path.resolve(__dirname, "node_modules/basiscore/dist"),
        },
      ],
      onBeforeSetupMiddleware: function (server) {
        server.app.use("/server/trust", trustHttpServer);
        server.app.use("/server/corporate", corporateHttpServer);
        server.app.use("/server/business", businessHttpServer);
        server.app.use("/server/active", activeManagerHttpServer);
        server.app.use("/server/external", externalMenuHttpServer);
        server.app.use("/server/notifications", notificationsHttpServer);
        server.app.use("/server/external", externalHttpServer);
        server.app.use("/server/dbsource", dbsource);
      },
      open: true,
    },
    mode: options.mode,
    optimization: {
      minimize: options.mode === "production",
      minimizer: [
        new UglifyJsPlugin({
          include: /\.min\.js$/,
        }),
      ],
    },
    module: {
      rules: [
        {
          test: /\.ts$/i,
          use: ["ts-loader"],
        },
        {
          test: /\.css$/i,
          use: ["style-loader", "css-loader"],
        },
        {
          test: /\.png$/i,
          type: "asset/inline",
        },
        {
          test: /\.html$/i,
          type: "asset/source",
        },
      ],
    },
    resolve: {
      extensions: [".ts", ".tsx", ".js", ".jsx", ".css", ".png", ".html"], // there's a dot missing
    },
    plugins: [
      new CircularDependencyPlugin({
        // `onStart` is called before the cycle detection starts
        onStart({ compilation }) {
          console.log("start detecting webpack modules cycles");
        },
        // `onDetected` is called for each module that is cyclical
        onDetected({ module: webpackModuleRecord, paths, compilation }) {
          // `paths` will be an Array of the relative module paths that make up the cycle
          // `module` will be the module record generated by webpack that caused the cycle
          compilation.errors.push(new Error(paths.join(" -> ")));
        },
        // `onEnd` is called before the cycle detection ends
        onEnd({ compilation }) {
          console.log("end detecting webpack modules cycles");
        },
      }),
    ],
  };
};
